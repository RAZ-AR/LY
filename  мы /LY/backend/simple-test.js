const http = require('http');

console.log('üß™ –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç LY Backend API\n');

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
function request(options, data = null) {
  return new Promise((resolve, reject) => {
    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', chunk => body += chunk);
      res.on('end', () => {
        try {
          resolve({
            status: res.statusCode,
            data: JSON.parse(body)
          });
        } catch (e) {
          resolve({
            status: res.statusCode,
            data: body
          });
        }
      });
    });
    
    req.on('error', reject);
    if (data) req.write(JSON.stringify(data));
    req.end();
  });
}

async function runTests() {
  const baseOptions = {
    hostname: 'localhost',
    port: 3000,
    headers: { 'Content-Type': 'application/json' }
  };

  console.log('1. üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ health endpoint...');
  try {
    const health = await request({
      ...baseOptions,
      path: '/health',
      method: 'GET'
    });
    
    if (health.status === 200) {
      console.log('   ‚úÖ –°–µ—Ä–≤–µ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç');
      console.log(`   üìä Status: ${health.data.status}`);
      console.log(`   üïí Time: ${health.data.timestamp}`);
    } else {
      console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ');
    }
  } catch (error) {
    console.log('   ‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error.message);
    console.log('   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
    return;
  }

  console.log('\n2. üè¢ –¢–µ—Å—Ç Companies API...');
  try {
    const companies = await request({
      ...baseOptions,
      path: '/api/v1/companies',
      method: 'GET'
    });
    
    console.log(`   üìà Status: ${companies.status}`);
    if (companies.data.success) {
      console.log(`   üìä –ö–æ–º–ø–∞–Ω–∏–π –Ω–∞–π–¥–µ–Ω–æ: ${companies.data.count}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${companies.data.error}`);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }

  console.log('\n3. üë• –¢–µ—Å—Ç Users API...');
  try {
    const users = await request({
      ...baseOptions,
      path: '/api/v1/users',
      method: 'GET'
    });
    
    console.log(`   üìà Status: ${users.status}`);
    if (users.data.success) {
      console.log(`   üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–∞–π–¥–µ–Ω–æ: ${users.data.count}`);
    } else {
      console.log(`   ‚ö†Ô∏è  ${users.data.error}`);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }

  console.log('\n4. üìä –¢–µ—Å—Ç Analytics API...');
  try {
    const analytics = await request({
      ...baseOptions,
      path: '/api/v1/analytics/dashboard',
      method: 'GET'
    });
    
    console.log(`   üìà Status: ${analytics.status}`);
    if (analytics.data.success) {
      console.log('   üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    } else {
      console.log(`   ‚ö†Ô∏è  ${analytics.data.error}`);
    }
  } catch (error) {
    console.log('   ‚ùå –û—à–∏–±–∫–∞:', error.message);
  }

  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüìã –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   üåê –û—Ç–∫—Ä–æ–π—Ç–µ: test-browser.html –≤ –±—Ä–∞—É–∑–µ—Ä–µ');
  console.log('   üì± –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ Postman/Insomnia');
  console.log('   üóÑÔ∏è  –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π—Ç–µ PostgreSQL');
}

runTests();